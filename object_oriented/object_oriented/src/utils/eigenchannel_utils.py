import numpy as np
import tmoutproc as top


def filter_coord(coord):
    """
    Filters coord path to remove fixed atoms -> CC part
    Args:
        coord:

    Returns:
        coord
    """
    coord_filtered = list()
    for i in range(0,len(coord)):
        if(len(coord[i]) == 5):
            continue
        else:
            coord_filtered.append(coord[i])
    return coord_filtered


def write_g98_file(filename, coord, displacement_matrix):
    #TODO: Check
    bohr2ang = 0.529177249
    f = open(filename, "w")
    f.write("Entering Gaussian System \n")
    f.write(" Gaussian 98:\n")
    f.write(" frequency output generated by the transport code\n")
    f.write(" *********************************************\n")
    f.write("                         Standard orientation:\n")
    f.write(" --------------------------------------------------------------------\n")
    f.write("  Center     Atomic     Atomic              Coordinates (Angstroms)\n")
    f.write("  Number     Number      Type              X           Y           Z\n")
    f.write(" --------------------------------------------------------------------\n")
    for i in range(0,len(coord)):
        center_number = i+1
        atomic_number = top.atom_type_to_number_coeff(coord[i][3])
        atomic_type = 0
        x = float(coord[i][0])*bohr2ang
        y = float(coord[i][1])*bohr2ang
        z = float(coord[i][2])*bohr2ang
        f.write("   " + str(center_number) + "         " + str(atomic_number) + "             " + str(
            atomic_type) + "        " + str(x) + "    " + str(y) + "    " + str(z) + "\n")
    f.write(" --------------------------------------------------------------------\n")
    f.write("                      1                      2                      3\n")
    f.write("                        a                      a                      a\n")
    f.write("                        1                      2                      3\n")
    f.write(" Frequencies --     1                 2                3\n")
    f.write(" Red. masses --   1                2                3\n")
    f.write(" Frc consts  --     0.0000                 0.0000                 0.0000\n")
    f.write(" IR Inten    --     0.0                 0.0                 0.0\n")
    f.write(" Raman Activ --     0.0000                 0.0000                 0.0000\n")
    f.write(" Depolar     --     0.0000                 0.0000                 0.0000\n")
    f.write(" Atom AN      X      Y      Z        X      Y      Z        X      Y      Z\n")
    for i in range(0,len(coord)):
        atom = i+1
        AN = top.atom_type_to_number_coeff(coord[i][3])
        digits = 5
        x_1 = np.round(displacement_matrix[0,i,0], digits)
        y_1 = np.round(displacement_matrix[0, i, 1], digits)
        z_1 = np.round(displacement_matrix[0, i, 2], digits)
        x_2 = np.round(displacement_matrix[1, i, 0], digits)
        y_2 = np.round(displacement_matrix[1, i, 1], digits)
        z_2 = np.round(displacement_matrix[1, i, 2], digits)
        x_3 = np.round(displacement_matrix[2, i, 0], digits)
        y_3 = np.round(displacement_matrix[2, i, 1], digits)
        z_3 = np.round(displacement_matrix[2, i, 2], digits)
        f.write("   " + str(atom) + "  " + str(AN) + "     " + str(x_1) + "   "  + str(y_1) + "   " + str(z_1) + "     " + str(x_2) + "   "  + str(y_2) + "   " + str(z_2) + "     "+ str(x_3) + "   "  + str(y_3) + "   " + str(z_3) + "\n")
    f.close()

def write_nmd_file(filename, coord, displacement_matrix, n_channel_max, use_mass_scaling=True, dimensions=3):

    bohr2ang = 0.529177249
    digits = 6

    coordinate_string = ""
    atom_string = ""
    modes = list()
    mass_scaling = list()

    for i in range(0, len(coord)):
        atomic_type = coord[i][3]
        # mass scaling !!!!
        if(use_mass_scaling == True):
            factor = 1 / np.sqrt(top.atom_weight(atomic_type))
        else:
            factor = 1
        mass_scaling.append(factor)

        x = float(coord[i][0]) * bohr2ang
        y = float(coord[i][1]) * bohr2ang
        z = float(coord[i][2]) * bohr2ang
        atom_string += atomic_type.upper() + " "
        coordinate_string += str(x) + " " + str(y) + " " + str(z) + " "
    for i in range(0, n_channel_max):
        mode_string=""
        for j in range(0,displacement_matrix.shape[0]):
            displacement = displacement_matrix[j,i]
            displacement = displacement * mass_scaling[int(j/dimensions)]
            mode_string = mode_string + " " + str(displacement)
            # fill fake y,z coordinate for one dimensional case
            if (dimensions == 1):
                raise ValueError("Eigenchannel not implemented for one dimension")
            #fill fake z coordinate for two dimensional case
            if (dimensions == 2 and j % 2==1):
                mode_string = mode_string + " " + str(0)
        modes.append(mode_string)

    with open(filename, "w") as f:
        f.write("names " + atom_string + "\n")
        f.write("coordinates  " + coordinate_string + "\n")
        for i in range(0,len(modes)):
            f.write("mode   " + modes[i] + "\n")




if __name__ == '__main__':
     pass


